
[project]
description = ""
name = "porringer"

license = {text = "MIT"}

authors = [
  {name = "Synodic Software", email = "contact@synodic.software"},
]
readme = "README.md"

dynamic = ["version"]

requires-python = ">=3.13"

dependencies = [
  "typer>=0.15.0",
  "pydantic>=2.10.3",
  "platformdirs>=4.1.0",
  "userpath>=1.9.1",
  "packaging>=23.2",
]

[project.urls]
homepage = "https://github.com/Synodic-Software/Porringer"
repository = "https://github.com/Synodic-Software/Porringer"

[tool.pdm.options]
update = ["--update-all"]

[tool.pdm.version]
source = "scm"

[dependency-groups]
lint = [
  "mypy>=1.10.0",
  "ruff>=0.7.1",
]
test = [
  "pytest>=7.4.4",
  "pytest-cov>=4.1.0",
  "pytest-mock>=3.12.0",
]

[project.entry-points."porringer.environment"]
pip = "porringer.plugin.pip.plugin:PipEnvironment"
pipx = "porringer.plugin.pipx.plugin:PipxEnvironment"
winget = "porringer.plugin.winget.plugin:WingetEnvironment"

[project.scripts]
porringer = "porringer.console.entry:app"

[tool.pytest.ini_options]
log_cli = true
testpaths = [
  "tests",
]

[tool.mypy]
exclude = "__pypackages__"
plugins = ["pydantic.mypy"]
strict = true

[tool.ruff]
line-length = 120
preview = true

[tool.ruff.lint]
ignore = [
  "D206",
  "D300",
  "D415",
  "E111",
  "E114",
  "E117",
]
select = [
  "D", # pydocstyle
  "F", # Pyflakes
  "I", # isort
  "PL", # pylint
  "UP", # pyupgrade
  "E", # pycodestyle
  "B", # flake8-bugbear
  "SIM", # flake8-simplify
  "PT", # flake8-pytest-style
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
docstring-code-format = true
indent-style = "space"
quote-style = "single"

[tool.coverage.report]
skip_empty = true

[tool.pdm.scripts]
analyze = {shell = "ruff check porringer tests"}
format = {shell = "ruff format"}
lint = {composite = ["analyze", "format", "type-check"]}
test = {shell = "pytest --cov=porringer --verbose tests"}
type-check = {shell = "mypy ."}

[build-system]
build-backend = "pdm.backend"
requires = ["pdm.backend"]
